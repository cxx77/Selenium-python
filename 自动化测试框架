一、序言
真正会利用Python+Selenium编写自动化脚本了，基本掌握了Selenium中webdriver的大部分常用的方法函数。有人说过，自动化测试大概可以分三个层次：

1. 手工测试用例转换成自动化测试脚本的过程

2. 能设计自动化测试框架，至少能够维护自动化测试框架。

3. 流程自动化方案设计，例如，一键打包，自动开始测试，自动发送测试报告，自动运维部署上线等。

在开始介绍设计简单的自动化测试框架之前，介绍一些设计框架的前提技能和基本Python编写代码的能力。这些能力包括但不限于以下内容：

1. 主流Python开发IDE工具的基本使用，例如Pycharm

2. Python中模块，类和对象的具体代码讲解。

3. Selenium 常见方法的二次封装。

4. 自定义方法的封装和方法的调用-浏览器引擎类。

5. Python读写配置文件介绍

6. Python如何获取系统时间和时间的格式化处理。

7. Python中常见字符串切割处理。

8. Python自定义一个日志生成方法封装。

9. Selenium中一个截图方法的封装。

10. Python中继承的使用。

通过介绍以上中级技能学习后，我们才可以，或者有能力去思考和动手去设计一个简单的自动化测试框架。

code:
        import time
        from selenium import webdriver
        ​
        class BaiduSearch:
            driver = webdriver.Chrome()
            driver.maximize_window()
            driver.implicitly_wait(10)

            def open_baidu(self):
                self.driver.get("http://www.baidu.com")
                time.sleep(2)

            def search_baidu(self):
                self.driver.find_element_by_id("kw").send_keys("selenium")
                time.sleep(2)
                print(self.driver.title)

        #if "__main__" == "__name__":
        baidu = BaiduSearch()
        baidu.open_baidu()
        baidu.search_baidu()
        

封装，模块调用：

code：
    basepage.py:
            import time
            class BasePage(object):
                """
                主要是把常用的几个Selenium方法封装到BasePage这个类，我们这里演示以下几个方法
                back()
                forward()
                get()
                quit()
                """

                def __init__(self, driver):
                    """
                    写一个构造函数，有一个参数driver
                    :param driver:
                    """
                    self.driver = driver

                def back(self):
                    """
                    浏览器后退按钮
                    :param none:
                    """
                    self.driver.back()
                    time.sleep(5)

                def forward(self):
                    """
                    浏览器前进按钮
                    :param none:
                    """
                    self.driver.forward()
                    time.sleep(5)

                def open_url(self, url):
                    """
                    打开url站点
                    :param url:
                    """
                    self.driver.get(url)

                def quit_browser(self):
                    """
                    关闭并停止浏览器服务
                    :param none:
                    """
                    self.driver.quit()
                    
    baidu_search.py:
                    import time
                    from selenium import webdriver
                    from basepage import BasePage

                    class BaiduSearch(object):
                        driver = webdriver.Chrome()
                        driver.maximize_window()
                        driver.implicitly_wait(10)

                        basepage = BasePage(driver)

                        def open_baidu(self):
                            self.basepage.open_url("https://www.baidu.com")
                            time.sleep(1)

                        def test_search(self):
                            self.driver.find_element_by_id('kw').send_keys("Selenium")
                            time.sleep(3)
                            self.basepage.back()
                            self.basepage.forward()
                            self.basepage.quit_browser()

                    baidu = BaiduSearch()
                    baidu.open_baidu()
                    baidu.test_search()
              
              
封装一个自己的类-浏览器引擎类
browserengine.py:
                from selenium import webdriver

                class BrowserEngine(object):
                    """
                    定义一个浏览器引擎类，根据browser_type的值去，控制启动不同的浏览器，这里主要是IE，Firefox, Chrome
                    """

                    def __init__(self, driver):
                        self.driver = driver

                    browser_type = "IE"  # maybe Firefox, Chrome, IE

                    def get_browser(self):
                        """
                        通过if语句，来控制初始化不同浏览器的启动，默认是启动Chrome
                        :return: driver
                        """

                        if self.browser_type == 'Firefox':
                            driver = webdriver.Firefox()
                        elif self.browser_type == 'Chrome':
                            driver = webdriver.Chrome()
                        elif self.browser_type == 'IE':
                            driver = webdriver.Ie()
                        else:
                            driver = webdriver.Chrome()

                        return driver
                 
browser_test.py:
              import time
              from browser_engine import BrowserEngine

              class TestBrowserEngine(object):

                  def open_browser(self):
                      browserengine = BrowserEngine(self)
                      time.sleep(2)
                      driver = browserengine.get_browser()
                      driver.maximize_window()
                      driver.implicitly_wait(10)

                      driver.get("http://baidu.com")


              tbe = TestBrowserEngine()
              tbe.open_browser()
              

Python中自带的一个切割方法split(),这个方法不带参数，就默认按照空格去切割字段，如果带参数，就按照参数去切割。
为了演示切割效果，我们用百度搜索一个关键字，然后去找一共找到了多个结果的数字。
code:
            import time
            from selenium import webdriver
            from selenium.webdriver.common.keys import Keys

            class GetSubString(object):
                def get_search_result(self):
                    driver = webdriver.Chrome()
                    driver.implicitly_wait(10)
                    driver.get("http://www.baidu.com")
                    time.sleep(10)
                    driver.maximize_window()
                    time.sleep(5)

                    element = driver.find_element_by_id("kw")
                    element.send_keys("恒恒")
                    element.send_keys(Keys.ENTER)
                    time.sleep(2)
                    search_result = driver.find_element_by_xpath(".//*[@id='container']/div[2]/div/div[2]/span").text
                    print(search_result)

                    string_result = (search_result.split("约")[1]).split("个")[0]
                    return string_result

            string_result = GetSubString()
            print(string_result.get_search_result())
